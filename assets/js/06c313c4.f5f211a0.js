"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[829],{33403:function(e,r,n){n.r(r),n.d(r,{frontMatter:function(){return a},contentTitle:function(){return d},metadata:function(){return l},toc:function(){return c},default:function(){return p}});var o=n(87462),t=n(63366),i=(n(67294),n(3905)),s=["components"],a={sidebar_position:2},d="Providers",l={unversionedId:"providers",id:"providers",isDocsHomePage:!1,title:"Providers",description:"A provider in its simplest form may look like this:",source:"@site/docs/providers.md",sourceDirName:".",slug:"/providers",permalink:"/Axis/docs/providers",editUrl:"https://github.com/Sleitnick/Axis/edit/master/docs/providers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Getting Started",permalink:"/Axis/docs/intro"},next:{title:"Extensions",permalink:"/Axis/docs/extensions"}},c=[{value:"Making it useful",id:"making-it-useful",children:[],level:2},{value:"Access a provider from another provider",id:"access-a-provider-from-another-provider",children:[],level:2},{value:"Avoid Strong Coupling",id:"avoid-strong-coupling",children:[],level:2}],u={toc:c};function p(e){var r=e.components,n=(0,t.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"providers"},"Providers"),(0,i.kt)("p",null,"A provider in its simplest form may look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local MyProvider = {}\n\n-- AxisName is optional, but is used to add a memory category in the developer console\nMyProvider.AxisName = "MyProvider"\n\n-- AxisPrepare is called on all providers when Axis:Start() is called\nfunction MyProvider:AxisPrepare()\nend\n\n-- After all AxisPrepare methods are done on all providers, AxisStarted will be called\nfunction MyProvider:AxisStarted()\nend\n\nreturn MyProvider\n')),(0,i.kt)("p",null,"To add a provider to Axis, call the ",(0,i.kt)("inlineCode",{parentName:"p"},"AddProvider")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"Axis:AddProvider(MyProvider)\n")),(0,i.kt)("h2",{id:"making-it-useful"},"Making it useful"),(0,i.kt)("p",null,"Providers are just tables. As such, developers can add whatever is desired to a provider table. For instance, here is an example of a provider that does simple math:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local MathProvider = {}\n\nfunction MathProvider:AxisPrepare() end\nfunction MathProvider:AxisStarted() end\n\nfunction MathProvider:Add(n1: number, n2: number): number\n    return n1 + n2\nend\n")),(0,i.kt)("p",null,"And now other code can call the provider:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local result = MathProvider:Add(10, 20)\nprint(result) --\x3e 30\n")),(0,i.kt)("p",null,"Of course, a module like above could exist as a standalone ModuleScript without any need to be a provider. Providers are usually more complex systems that benefit from being contained. For instance, there could be a provider that handles player data."),(0,i.kt)("h2",{id:"access-a-provider-from-another-provider"},"Access a provider from another provider"),(0,i.kt)("p",null,"It is common for one provider to use another. As stated earlier, providers are just tables. As such, there is no trickery in using one provider from another. Simply reference the provider table and use it as desired. ",(0,i.kt)("em",{parentName:"p"},"However"),", providers should respect the lifecycle methods. Providers should ",(0,i.kt)("em",{parentName:"p"},"not")," access other providers until the ",(0,i.kt)("inlineCode",{parentName:"p"},"AxisStarted")," method has been called."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local AnotherProvider = require(somewhere.AnotherProvider) -- Get the other provider\n\nlocal MyProvider = {}\n\nfunction MyProvider:AxisPrepare()\n    -- Not safe to use AnotherProvider because we can't guarantee it is ready yet\nend\n\nfunction MyProvider:AxisStarted()\n    -- We can now guarantee that AnotherProvider:AxisPrepare() has been called and completed.\n    -- It is now safe to use AnotherProvider.\n    AnotherProvider:DoSomething()\nend\n\nreturn MyProvider\n")),(0,i.kt)("h2",{id:"avoid-strong-coupling"},"Avoid Strong Coupling"),(0,i.kt)("p",null,"Coupling occurs when pieces of code require other pieces of code. Such dependencies are unavoidable in many use-cases. However, providers are designed to be top-level singletons. As such, they should be design as standalone as possible. While there are definitely cases where providers will need to access other providers (hence the lifecycle methods existing in the first place), it is better to design around such necessities."))}p.isMDXComponent=!0}}]);