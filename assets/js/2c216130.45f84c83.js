"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[216],{24124:function(e){e.exports=JSON.parse('{"functions":[{"name":"AddExtension","desc":"Add an extension to Axis. Extensions will run before certain lifecycle\\nmethods per provider. Extensions are useful for extending the capabilities\\nof providers.\\n\\nHere\'s an example of logging when a provider is about to be prepared and\\nstarted:\\n\\n```lua\\nlocal MyExtension = {}\\n\\n-- Note the dot-notation for functions instead of colon-notation\\nfunction MyExtension.BeforePrepare(provider)\\n\\tprint(\\"BeforePrepare provider\\", provider.AxisName)\\nend\\nfunction MyExtension.BeforeStarted(provider)\\n\\tprint(\\"BeforeStarted provider\\", provider.AxisName)\\nend\\n\\nAxis:AddExtension(MyExtension)\\n```\\n\\nExtensions can also be added at the provider level. This is useful if an\\nextension shouldn\'t apply to all other providers. Adding extensions at the\\nprovider level is done by adding an extension into the provider\'s\\n`AxisExtension` table:\\n\\n```lua\\nlocal MyProvider = {}\\n\\nMyProvider.AxisExtensions = {MyExtension}\\n```\\n\\nExtensions are executed in the order of which they were added. Axis-level\\nextensions run before provider-level extensions.\\n\\n:::caution Before Start\\nMust be called _before_ `Axis:Start()`.\\n:::","params":[{"name":"extension","desc":"","lua_type":"Extension"}],"returns":[{"desc":"","lua_type":"Extension\\n"}],"function_type":"method","source":{"line":144,"path":"src/init.lua"}},{"name":"AddProvider","desc":"Add a provider to Axis.\\n\\n```lua\\nlocal MyProvider = {}\\n\\n-- Optional name for memory labeling:\\nMyProvider.AxisName = \\"MyProvider\\"\\n\\n-- AxisPrepare is called and completed on all providers before moving\\n-- on to AxisStarted:\\nfunction MyProvider:AxisPrepare()\\n\\tprint(\\"Prepare MyProvider here\\")\\nend\\n\\n-- AxisStarted is called once all AxisPrepare methods have completed:\\nfunction MyProvider:AxisStarted()\\n\\tprint(\\"Axis started\\")\\nend\\n\\n-- Add the provider to Axis:\\nAxis:AddProvider(MyProvider)\\n```\\n\\n:::caution Before Start\\nMust be called _before_ `Axis:Start()`.\\n:::","params":[{"name":"provider","desc":"","lua_type":"Provider"}],"returns":[{"desc":"","lua_type":"Provider\\n"}],"function_type":"method","source":{"line":180,"path":"src/init.lua"}},{"name":"Start","desc":"Starts Axis and yields the current thread until Axis has fully started.\\n\\n```lua\\n-- [Add providers/extensions here before starting]\\nAxis:Start()\\nprint(\\"Axis has started\\")\\n```\\n\\n:::caution Call Once\\nCan only be called once. Calling more than once will throw an error.\\n:::\\n\\n:::note Yields Only If Necessary\\nIf any of the AxisPrepare or BeforePrepare functions yield, Axis will yield\\nto wait for them to complete. If none yield, then Axis will start immediately\\nwithout any yield.\\n:::","params":[],"returns":[],"function_type":"method","yields":true,"source":{"line":210,"path":"src/init.lua"}},{"name":"AwaitStart","desc":"Yields the current thread until Axis has fully started. If Axis\\nhas already been started, this function simply does nothing.\\n\\n```lua\\nAxis:AwaitStart()\\nprint(\\"Axis has started!\\")\\n```","params":[],"returns":[],"function_type":"method","yields":true,"source":{"line":278,"path":"src/init.lua"}},{"name":"OnStart","desc":"Calls the callback once Axis has fully started. If Axis has\\nalready been started, then the callback is immediately called.\\n\\n```lua\\nAxis:OnStart(function()\\n\\tprint(\\"Axis has started!\\")\\nend)\\n```","params":[{"name":"callback","desc":"","lua_type":"() -> ()"}],"returns":[],"function_type":"method","source":{"line":294,"path":"src/init.lua"}}],"properties":[],"types":[{"name":"Provider","desc":"Providers are simple structures that provide top-level structure,\\nas well as lifecycle methods to help safeguard communication\\nbetween each other.","fields":[{"name":"AxisName","lua_type":"string?","desc":""},{"name":"AxisPrepare","lua_type":"(Provider) -> ()","desc":""},{"name":"AxisStarted","lua_type":"(Provider) -> ()","desc":""}],"source":{"line":20,"path":"src/init.lua"}},{"name":"Extension","desc":"Extensions allow developers to extend the capabilities\\nof providers within Axis.","fields":[{"name":"BeforePrepare","lua_type":"(Provider) -> ()","desc":""},{"name":"BeforeStarted","lua_type":"(Provider) -> ()","desc":""}],"source":{"line":37,"path":"src/init.lua"}}],"name":"Axis","desc":"Axis is a provider framework. Providers are simple structures that give high-level\\nencapsulation of game logic, as well as providing lifecycle methods to help control\\nthe communication between each other.\\n\\nAxis also provides the ability to add extensions, which extend the capabilities of\\nproviders. Extensions can be added to all providers, or can be added on a per-provider\\nbasis.\\n\\nA typical setup with separate providers and extensions into their own ModuleScripts, and\\nthen a single script to collect all of those ModuleScripts and add them into Axis. Such\\na script may look like the following:\\n\\n```lua\\nlocal Axis = require(somewhere.Axis)\\n\\n-- Add providers:\\nfor _,module in ipairs(somewhere.Providers:GetChildren()) do\\n\\tlocal provider = require(module)\\n\\tAxis:AddProvider(provider)\\nend\\n\\n-- Add extensions:\\nfor _,module in ipairs(somewhere.Extensions:GetChildren()) do\\n\\tlocal extension = require(module)\\n\\tAxis:AddExtension(extension)\\nend\\n\\n-- Start Axis:\\nAxis:Start()\\n\\nprint(\\"Axis started\\")\\n```","source":{"line":79,"path":"src/init.lua"}}')}}]);