[{"title":"Axis","type":0,"sectionRef":"#","url":"api/Axis","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Axis","url":"api/Axis#types","content":" "},{"title":"Provider​","type":1,"pageTitle":"Axis","url":"api/Axis#Provider","content":"&lt;/&gt; interface Provider { AxisName: string? AxisPrepare: (Provider) → () AxisStarted: (Provider) → () } Providers are simple structures that provide top-level structure, as well as lifecycle methods to help safeguard communication between each other.  "},{"title":"Extension​","type":1,"pageTitle":"Axis","url":"api/Axis#Extension","content":"&lt;/&gt; interface Extension { BeforePrepare: (Provider) → () BeforeStarted: (Provider) → () } Extensions allow developers to extend the capabilities of providers within Axis. "},{"title":"Functions​","type":1,"pageTitle":"Axis","url":"api/Axis#functions","content":" "},{"title":"AddExtension​","type":1,"pageTitle":"Axis","url":"api/Axis#AddExtension","content":"&lt;/&gt; Axis:AddExtension(extension: Extension) → Extension Add an extension to Axis. Extensions will run before certain lifecycle methods per provider. Extensions are useful for extending the capabilities of providers. Here's an example of logging when a provider is about to be prepared and started: local MyExtension = {} -- Note the dot-notation for functions instead of colon-notation function MyExtension.BeforePrepare(provider) print(&quot;BeforePrepare provider&quot;, provider.AxisName) end function MyExtension.BeforeStarted(provider) print(&quot;BeforeStarted provider&quot;, provider.AxisName) end Axis:AddExtension(MyExtension) Extensions can also be added at the provider level. This is useful if an extension shouldn't apply to all other providers. Adding extensions at the provider level is done by adding an extension into the provider'sAxisExtension table: local MyProvider = {} MyProvider.AxisExtensions = {MyExtension} Extensions are executed in the order of which they were added. Axis-level extensions run before provider-level extensions. Before Start Must be called before Axis:Start().  "},{"title":"AddProvider​","type":1,"pageTitle":"Axis","url":"api/Axis#AddProvider","content":"&lt;/&gt; Axis:AddProvider(provider: Provider) → Provider Add a provider to Axis. local MyProvider = {} -- Optional name for memory labeling: MyProvider.AxisName = &quot;MyProvider&quot; -- AxisPrepare is called and completed on all providers before moving -- on to AxisStarted: function MyProvider:AxisPrepare() print(&quot;Prepare MyProvider here&quot;) end -- AxisStarted is called once all AxisPrepare methods have completed: function MyProvider:AxisStarted() print(&quot;Axis started&quot;) end -- Add the provider to Axis: Axis:AddProvider(MyProvider) Before Start Must be called before Axis:Start().  "},{"title":"Start​","type":1,"pageTitle":"Axis","url":"api/Axis#Start","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Axis:Start() → () Starts Axis and yields the current thread until Axis has fully started. -- [Add providers/extensions here before starting] Axis:Start() print(&quot;Axis has started&quot;) Call Once Can only be called once. Calling more than once will throw an error. Yields Only If Necessary If any of the AxisPrepare or BeforePrepare functions yield, Axis will yield to wait for them to complete. If none yield, then Axis will start immediately without any yield.  "},{"title":"AwaitStart​","type":1,"pageTitle":"Axis","url":"api/Axis#AwaitStart","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Axis:AwaitStart() → () Yields the current thread until Axis has fully started. If Axis has already been started, this function simply does nothing. Axis:AwaitStart() print(&quot;Axis has started!&quot;)   "},{"title":"OnStart​","type":1,"pageTitle":"Axis","url":"api/Axis#OnStart","content":"&lt;/&gt; Axis:OnStart(callback: () → ()) → () Calls the callback once Axis has fully started. If Axis has already been started, then the callback is immediately called. Axis:OnStart(function() print(&quot;Axis has started!&quot;) end)  "}]